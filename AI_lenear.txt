commands:

sudo apt update
sudo apt install python3 python3-venv python3-pip
python3 -m venv ai-cli-env
source ai-cli-env/bin/activate
pip install typer[all] requests

export GEMINI_API_KEY="your-api-key"
source ~/.bashrc


python gemini_log_analyzer.py --file ./access.txt --question "find login errors"


code:
import typer
import google.generativeai as genai
import os

app = typer.Typer()

@app.command("analyze")
def analyze_command(
    file_path: str = typer.Option(..., "--file", "-f", help="Path to the log file"),
    question: str = typer.Option("Analyze the log and summarize key issues.", "--question", "-q", help="Custom question"),
    api_key: str = typer.Option(None, help="Gemini API key (or uses GEMINI_API_KEY env var)")
):
    """
    Analyze a log file using Gemini 2.5 Pro API.
    """

    # Get API key from environment if not provided via CLI
    api_key = api_key or os.getenv("GEMINI_API_KEY")

    if not api_key:
        typer.echo("❌ No API key provided and GEMINI_API_KEY env variable is missing.")
        raise typer.Exit(1)

    # Configure the Gemini API
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("gemini-2.5-pro")
    except Exception as e:
        typer.echo(f"❌ Failed to initialize model: {e}")
        raise typer.Exit(1)

    # Read the file
    try:
        with open(file_path, 'r') as f:
            log_data = f.read()
    except FileNotFoundError:
        typer.echo(f"❌ File not found: {file_path}")
        raise typer.Exit(1)

    # Combine with prompt
    prompt = f"{log_data}\n\n{question}"

    # Send to Gemini
    try:
        response = model.generate_content(prompt)
        typer.echo("\n✅ AI Response:\n")
        typer.echo(response.text)
    except Exception as e:
        typer.echo(f"❌ API Error: {e}")
        raise typer.Exit(1)

if __name__ == "__main__":
    app()
